#!python3

from importlib.machinery import SourceFileLoader
from argparse import ArgumentParser
from zlax.muflib import init, step
import os, subprocess, shlex
from sys import stderr


def main():
    parser = ArgumentParser(description="zluciole")
    parser.add_argument("file")
    parser.add_argument("-prob", action="store_true", help="Simulate ProbZelus code")
    parser.add_argument(
        "-n",
        dest="steps",
        type=int,
        help="Number of steps (default never stops)",
        default=-1,
    )
    parser.add_argument(
        "-s",
        dest="node",
        action="store",
        type=str,
        help="Node to simulate (required)",
        required=True,
    )
    parser.add_argument(
        "-I",
        action="append",
        dest="libraries",
        default=["jax"],
        help="load Zelus library",
    )
    args = parser.parse_args()

    zlc = "zeluc" if not args.prob else "probzeluc"

    # Compile to Python
    links = " ".join([f"-I `zeluc -where`-{l}" for l in args.libraries])
    cmd = f"{zlc} -deps {links} -jax {args.file}"
    print(f"Compile {args.file} to Python :\n{cmd}")
    try:
        subprocess.check_call(cmd, shell=True)
    except subprocess.CalledProcessError as e:
        print("Error :", e, file=stderr)
        exit(-1)

    # Import the node to simulate from the previously compiled Python file
    pyfile = os.path.splitext(args.file)[0] + ".py"
    module = SourceFileLoader("jax_module", pyfile).load_module()
    s = init(getattr(module, args.node))

    # Simulation loop
    i = 0
    while i < args.steps:
        s, _ = step(s, ())
        if i != -1:
            i += 1


if __name__ == "__main__":
    main()
